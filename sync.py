#!/usr/bin/env python3
"""
–°–≤—ñ—Ç–ª–æ–ë–æ—Ç-—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ç–æ—Ä v1.0
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –≥—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –∑ be-svitlo –¥–æ svitlobot.in.ua
"""

import requests
import json
import os
import time
from datetime import datetime
from pathlib import Path
import logging

# ============ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ============
CHANNEL_KEY = "–í–ê–®_–ö–õ–Æ–ß_–°–Æ–î–ò"  # üîë –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω–∏–π –∫–ª—é—á
QUEUE = "6.1"  # üìç –ó–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à—É —á–µ—Ä–≥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "3.2")
CHECK_INTERVAL = 300  # ‚è± –°–µ–∫—É–Ω–¥ –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ (300 = 5 —Ö–≤)

# API endpoints
BE_SVITLO_API = f"https://be-svitlo.oe.if.ua/schedule-by-queue?queue={QUEUE}"
SVITLOBOT_API = "https://api.svitlobot.in.ua/website/timetableEditEvent"

# ============ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ============
BASE_DIR = Path(__file__).parent
DATA_DIR = BASE_DIR / "data"
LOGS_DIR = BASE_DIR / "logs"

# –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
DATA_DIR.mkdir(exist_ok=True)
LOGS_DIR.mkdir(exist_ok=True)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    datefmt='%d.%m %H:%M',
    handlers=[
        logging.FileHandler(LOGS_DIR / "sync.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# ============ –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ============

def get_week_file():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è"""
    week_num = datetime.now().isocalendar()[1]
    return DATA_DIR / f"timetable_week_{week_num}.json"

def load_week_data():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è"""
    week_file = get_week_file()
    
    if week_file.exists():
        try:
            with open(week_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {week_file.name}: {e}")
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å (–≤—Å—ñ –¥–Ω—ñ –±–µ–∑ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å)
    return {
        "week": datetime.now().isocalendar()[1],
        "days": ["0" * 24 for _ in range(7)]
    }

def save_week_data(data):
    """–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ —Ç–∏–∂–Ω—è"""
    week_file = get_week_file()
    try:
        with open(week_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É {week_file.name}: {e}")
        return False

def parse_time(time_str):
    """–ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —á–∞—Å '15:00' —É –≥–æ–¥–∏–Ω–∏ —Ç–∞ —Ö–≤–∏–ª–∏–Ω–∏"""
    try:
        h, m = map(int, time_str.split(':'))
        return h, m
    except:
        return None, None

def build_day_string(schedule_data):
    """
    –ü–æ–±—É–¥—É–≤–∞—Ç–∏ 24-—Å–∏–º–≤–æ–ª—å–Ω–∏–π —Ä—è–¥–æ–∫ –¥–ª—è –¥–Ω—è
    
    –§–æ—Ä–º–∞—Ç:
    0 = —Å–≤—ñ—Ç–ª–æ —î
    1 = –ø–æ–≤–Ω—ñ—Å—Ç—é –±–µ–∑ —Å–≤—ñ—Ç–ª–∞
    2 = –≤–∏–º–∫–Ω–µ–Ω–æ –ø–µ—Ä—à—É –ø–æ–ª–æ–≤–∏–Ω—É –≥–æ–¥–∏–Ω–∏ (00-30)
    3 = –≤–∏–º–∫–Ω–µ–Ω–æ –¥—Ä—É–≥—É –ø–æ–ª–æ–≤–∏–Ω—É (30-00)
    """
    hours = ['0'] * 24
    
    if not schedule_data:
        return ''.join(hours)
    
    for event in schedule_data:
        from_time = event.get('from', '')
        to_time = event.get('to', '')
        
        if not from_time or not to_time:
            continue
        
        from_h, from_m = parse_time(from_time)
        to_h, to_m = parse_time(to_time)
        
        if from_h is None or to_h is None:
            continue
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–µ—Ä—à–∏–π —á–∞—Å
        if from_m == 0:
            start_hour = from_h
        elif from_m == 30:
            hours[from_h] = '3'  # –î—Ä—É–≥–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ –≥–æ–¥–∏–Ω–∏
            start_hour = from_h + 1
        else:
            # –Ø–∫—â–æ —Ö–≤–∏–ª–∏–Ω–∏ –Ω–µ 0 —ñ –Ω–µ 30, –≤–≤–∞–∂–∞—î–º–æ –∑ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≥–æ–¥–∏–Ω–∏
            start_hour = from_h + 1
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —á–∞—Å
        if to_m == 0:
            end_hour = to_h - 1
        elif to_m == 30:
            end_hour = to_h - 1
            if end_hour >= start_hour:
                hours[to_h] = '2'  # –ü–µ—Ä—à–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ –≥–æ–¥–∏–Ω–∏
        else:
            end_hour = to_h
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ–≤–Ω—ñ –≥–æ–¥–∏–Ω–∏ –º—ñ–∂ –ø–æ—á–∞—Ç–∫–æ–º —ñ –∫—ñ–Ω—Ü–µ–º
        for h in range(start_hour, min(end_hour + 1, 24)):
            if hours[h] == '0':
                hours[h] = '1'
    
    return ''.join(hours)

def fetch_schedule(target_date=None):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –∑ be-svitlo –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó –¥–∞—Ç–∏"""
    try:
        # Headers –¥–ª—è –æ–±—Ö–æ–¥—É –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ –±–æ—Ç—ñ–≤
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'uk-UA,uk;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept-Encoding': 'gzip, deflate',
            'Referer': 'https://svitlo.oe.if.ua/',
            'Origin': 'https://svitlo.oe.if.ua',
            'Connection': 'keep-alive',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-site'
        }
        
        response = requests.get(BE_SVITLO_API, headers=headers, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        
        # –Ø–∫—â–æ –¥–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞, –±–µ—Ä–µ–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ
        if target_date is None:
            target_date = datetime.now()
        
        date_str = target_date.strftime('%d.%m.%Y')
        
        if isinstance(data, list):
            for day_data in data:
                # –§–æ—Ä–º–∞—Ç API: eventDate –∑–∞–º—ñ—Å—Ç—å date
                if day_data.get('eventDate') == date_str:
                    # –î–∞–Ω—ñ –≤ queues -> {queue} -> –º–∞—Å–∏–≤ –ø–æ–¥—ñ–π
                    queues_data = day_data.get('queues', {})
                    if QUEUE in queues_data:
                        return queues_data[QUEUE]
                    else:
                        logger.warning(f"–ß–µ—Ä–≥–∞ {QUEUE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–∏—Ö –¥–ª—è {date_str}")
                        return []
        
        logger.warning(f"–ì—Ä–∞—Ñ—ñ–∫ –Ω–∞ {date_str} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ API")
        return []
        
    except requests.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ be-svitlo: {e}")
        return None
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö: {e}")
        return None

def send_to_svitlobot(timetable_data):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –Ω–∞ svitlobot"""
    try:
        url = f"{SVITLOBOT_API}?channel_key={CHANNEL_KEY}&timetableData={timetable_data}"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        
        logger.info("‚úÖ –ì—Ä–∞—Ñ—ñ–∫ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ svitlobot.in.ua")
        return True
        
    except requests.RequestException as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞ svitlobot: {e}")
        return False

def sync_schedule():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó"""
    logger.info("üîÑ –ü–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó...")
    
    from datetime import timedelta
    
    day_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥']
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ —Ç–∏–∂–Ω—è
    week_data = load_week_data()
    has_changes = False
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∞ –∑–∞–≤—Ç—Ä–∞
    for day_offset in [0, 1]:  # 0 = —Å—å–æ–≥–æ–¥–Ω—ñ, 1 = –∑–∞–≤—Ç—Ä–∞
        target_date = datetime.now() + timedelta(days=day_offset)
        weekday = target_date.weekday()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è
        schedule = fetch_schedule(target_date)
        
        if schedule is None:
            logger.warning(f"‚è∏ –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è {day_names[weekday]} ({target_date.strftime('%d.%m')})")
            continue
        
        # –ë—É–¥—É—î–º–æ —Ä—è–¥–æ–∫ –¥–ª—è –¥–Ω—è
        new_day_string = build_day_string(schedule)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è –≥—Ä–∞—Ñ—ñ–∫
        if week_data['days'][weekday] != new_day_string:
            week_data['days'][weekday] = new_day_string
            has_changes = True
            
            # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –≥–æ–¥–∏–Ω–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å
            outage_hours = new_day_string.count('1') + new_day_string.count('2') + new_day_string.count('3')
            day_label = "–°—å–æ–≥–æ–¥–Ω—ñ" if day_offset == 0 else "–ó–∞–≤—Ç—Ä–∞"
            logger.info(f"üìù {day_label} ({day_names[weekday]}): {outage_hours} –≥–æ–¥. –≤—ñ–¥–∫–ª—é—á–µ–Ω—å - –ó–ú–Ü–ù–ï–ù–û")
        else:
            day_label = "—Å—å–æ–≥–æ–¥–Ω—ñ" if day_offset == 0 else "–∑–∞–≤—Ç—Ä–∞"
            logger.info(f"‚è∏ –ó–º—ñ–Ω –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ –¥–ª—è {day_label} ({day_names[weekday]})")
    
    # –Ø–∫—â–æ —î –∑–º—ñ–Ω–∏ - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
    if not has_changes:
        logger.info("‚è∏ –ñ–æ–¥–Ω–∏—Ö –∑–º—ñ–Ω —É –≥—Ä–∞—Ñ—ñ–∫–∞—Ö")
        return
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–º–µ—Ä —Ç–∏–∂–Ω—è
    week_data['week'] = datetime.now().isocalendar()[1]
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
    if not save_week_data(week_data):
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ")
        return
    
    # –§–æ—Ä–º—É—î–º–æ timetableData
    timetable_data = '%3B'.join(week_data['days'])
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ svitlobot
    if send_to_svitlobot(timetable_data):
        logger.info("‚úÖ –ì—Ä–∞—Ñ—ñ–∫ —É—Å–ø—ñ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ svitlobot.in.ua")
    else:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –Ω–∞ svitlobot")

# ============ –ì–û–õ–û–í–ù–ò–ô –¶–ò–ö–õ ============

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    logger.info("=" * 60)
    logger.info("üöÄ –°–≤—ñ—Ç–ª–æ–ë–æ—Ç-—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω–æ")
    logger.info(f"üìç –ß–µ—Ä–≥–∞: {QUEUE}")
    logger.info(f"‚è± –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
    logger.info("=" * 60)
    
    if CHANNEL_KEY == "–í–ê–®_–ö–õ–Æ–ß_–°–Æ–î–ò":
        logger.error("‚ùå –£–í–ê–ì–ê: –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ CHANNEL_KEY!")
        logger.error("–í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ —Ñ–∞–π–ª sync.py —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤–∞—à –∫–ª—é—á")
        return
    
    # –ü–µ—Ä—à–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –æ–¥—Ä–∞–∑—É
    sync_schedule()
    
    # –¶–∏–∫–ª—ñ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    try:
        while True:
            time.sleep(CHECK_INTERVAL)
            sync_schedule()
            
    except KeyboardInterrupt:
        logger.info("\nüëã –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    main()
